{
  "kind": "DeploymentList",
  "apiVersion": "apps/v1",
  "metadata": {
    "selfLink": "/apis/apps/v1/deployments",
    "resourceVersion": "1394416"
  },
  "items": [
    {
      "metadata": {
        "name": "frontend",
        "namespace": "default",
        "selfLink": "/apis/apps/v1/namespaces/default/deployments/frontend",
        "uid": "4242d54c-5a24-46fb-8df0-d6fdfb06524b",
        "resourceVersion": "1387572",
        "generation": 1,
        "creationTimestamp": "2020-07-06T23:39:58Z",
        "annotations": {
          "deployment.kubernetes.io/revision": "1"
        }
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "matchLabels": {
            "app": "guestbook"
          }
        },
        "template": {
          "metadata": {
            "creationTimestamp": null,
            "labels": {
              "app": "guestbook"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "php-redis",
                "image": "k8s.gcr.io/guestbook:v3",
                "ports": [
                  {
                    "name": "http-server",
                    "containerPort": 3000,
                    "protocol": "TCP"
                  }
                ],
                "env": [
                  {
                    "name": "GET_HOSTS_FROM",
                    "value": "dns"
                  }
                ],
                "resources": {
                  "limits": {
                    "cpu": "2",
                    "memory": "1000Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                },
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "imagePullPolicy": "IfNotPresent"
              }
            ],
            "restartPolicy": "Always",
            "terminationGracePeriodSeconds": 30,
            "dnsPolicy": "ClusterFirst",
            "securityContext": {},
            "schedulerName": "default-scheduler"
          }
        },
        "strategy": {
          "type": "RollingUpdate",
          "rollingUpdate": {
            "maxUnavailable": "25%",
            "maxSurge": "25%"
          }
        },
        "revisionHistoryLimit": 10,
        "progressDeadlineSeconds": 600
      },
      "status": {
        "observedGeneration": 1,
        "replicas": 1,
        "updatedReplicas": 1,
        "readyReplicas": 1,
        "availableReplicas": 1,
        "conditions": [
          {
            "type": "Available",
            "status": "True",
            "lastUpdateTime": "2020-07-06T23:40:00Z",
            "lastTransitionTime": "2020-07-06T23:40:00Z",
            "reason": "MinimumReplicasAvailable",
            "message": "Deployment has minimum availability."
          },
          {
            "type": "Progressing",
            "status": "True",
            "lastUpdateTime": "2020-07-06T23:40:00Z",
            "lastTransitionTime": "2020-07-06T23:39:58Z",
            "reason": "NewReplicaSetAvailable",
            "message": "ReplicaSet \"frontend-65974f44cf\" has successfully progressed."
          }
        ]
      }
    },
    {
      "metadata": {
        "name": "kubernetesapisample",
        "namespace": "default",
        "selfLink": "/apis/apps/v1/namespaces/default/deployments/kubernetesapisample",
        "uid": "217fbfcb-9cb2-4c48-b6c4-9573dff53bff",
        "resourceVersion": "1393751",
        "generation": 2,
        "creationTimestamp": "2020-07-07T00:38:42Z",
        "labels": {
          "dev.okteto.com": "true"
        },
        "annotations": {
          "deployment.kubernetes.io/revision": "1",
          "dev.okteto.com/auto-create": "up",
          "dev.okteto.com/deployment": "{\"metadata\":{\"name\":\"kubernetesapisample\",\"namespace\":\"default\",\"creationTimestamp\":null,\"annotations\":{\"dev.okteto.com/auto-create\":\"up\"}},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"kubernetesapisample\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"kubernetesapisample\"}},\"spec\":{\"containers\":[{\"name\":\"dev\",\"image\":\"okteto/dotnetcore:3\",\"resources\":{},\"imagePullPolicy\":\"Always\"}],\"terminationGracePeriodSeconds\":0}},\"strategy\":{\"type\":\"Recreate\"}},\"status\":{}}",
          "dev.okteto.com/revision": "1",
          "dev.okteto.com/version": "1.0"
        }
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "matchLabels": {
            "app": "kubernetesapisample"
          }
        },
        "template": {
          "metadata": {
            "creationTimestamp": null,
            "labels": {
              "app": "kubernetesapisample",
              "dev.okteto.com": "true",
              "interactive.dev.okteto.com": "kubernetesapisample"
            }
          },
          "spec": {
            "volumes": [
              {
                "name": "okteto-sync-secret",
                "secret": {
                  "secretName": "okteto-kubernetesapisample",
                  "items": [
                    {
                      "key": "config.xml",
                      "path": "config.xml",
                      "mode": 292
                    },
                    {
                      "key": "cert.pem",
                      "path": "cert.pem",
                      "mode": 292
                    },
                    {
                      "key": "key.pem",
                      "path": "key.pem",
                      "mode": 292
                    }
                  ],
                  "defaultMode": 420
                }
              },
              {
                "name": "okteto-kubernetesapisample",
                "persistentVolumeClaim": {
                  "claimName": "okteto-kubernetesapisample"
                }
              },
              {
                "name": "okteto-dev-secret",
                "secret": {
                  "secretName": "okteto-kubernetesapisample",
                  "items": [
                    {
                      "key": "dev-secret-authorized_keys",
                      "path": "authorized_keys",
                      "mode": 292
                    }
                  ],
                  "defaultMode": 420
                }
              },
              {
                "name": "okteto-bin",
                "emptyDir": {}
              }
            ],
            "initContainers": [
              {
                "name": "okteto-bin",
                "image": "okteto/bin:1.1.20",
                "command": [
                  "sh",
                  "-c",
                  "cp /usr/local/bin/* /okteto/bin"
                ],
                "resources": {},
                "volumeMounts": [
                  {
                    "name": "okteto-bin",
                    "mountPath": "/okteto/bin"
                  }
                ],
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "imagePullPolicy": "IfNotPresent"
              }
            ],
            "containers": [
              {
                "name": "dev",
                "image": "okteto/dotnetcore:3",
                "command": [
                  "/var/okteto/bin/start.sh"
                ],
                "args": [
                  "-r",
                  "-s",
                  "authorized_keys:/var/okteto/remote/authorized_keys"
                ],
                "workingDir": "/src",
                "env": [
                  {
                    "name": "ASPNETCORE_ENVIRONMENT",
                    "value": "Development"
                  },
                  {
                    "name": "OKTETO_MARKER_PATH",
                    "value": "/src/okteto.yml"
                  },
                  {
                    "name": "OKTETO_NAMESPACE",
                    "value": "default"
                  },
                  {
                    "name": "OKTETO_NAME",
                    "value": "kubernetesapisample"
                  }
                ],
                "resources": {},
                "volumeMounts": [
                  {
                    "name": "okteto-kubernetesapisample",
                    "mountPath": "/src",
                    "subPath": "src"
                  },
                  {
                    "name": "okteto-kubernetesapisample",
                    "mountPath": "/var/syncthing",
                    "subPath": "syncthing"
                  },
                  {
                    "name": "okteto-kubernetesapisample",
                    "mountPath": "/var/okteto/remote",
                    "subPath": "okteto-remote"
                  },
                  {
                    "name": "okteto-sync-secret",
                    "mountPath": "/var/syncthing/secret/"
                  },
                  {
                    "name": "okteto-dev-secret",
                    "mountPath": "/var/okteto/secret/"
                  },
                  {
                    "name": "okteto-bin",
                    "mountPath": "/var/okteto/bin"
                  }
                ],
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "imagePullPolicy": "Always"
              }
            ],
            "restartPolicy": "Always",
            "terminationGracePeriodSeconds": 0,
            "dnsPolicy": "ClusterFirst",
            "securityContext": {
              "runAsUser": 0,
              "runAsGroup": 0,
              "fsGroup": 0
            },
            "affinity": {
              "podAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchLabels": {
                        "interactive.dev.okteto.com": "kubernetesapisample"
                      }
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }
                ]
              }
            },
            "schedulerName": "default-scheduler"
          }
        },
        "strategy": {
          "type": "Recreate"
        },
        "revisionHistoryLimit": 10,
        "progressDeadlineSeconds": 600
      },
      "status": {
        "observedGeneration": 2,
        "replicas": 1,
        "updatedReplicas": 1,
        "readyReplicas": 1,
        "availableReplicas": 1,
        "conditions": [
          {
            "type": "Available",
            "status": "True",
            "lastUpdateTime": "2020-07-07T00:38:49Z",
            "lastTransitionTime": "2020-07-07T00:38:49Z",
            "reason": "MinimumReplicasAvailable",
            "message": "Deployment has minimum availability."
          },
          {
            "type": "Progressing",
            "status": "True",
            "lastUpdateTime": "2020-07-07T00:38:49Z",
            "lastTransitionTime": "2020-07-07T00:38:42Z",
            "reason": "NewReplicaSetAvailable",
            "message": "ReplicaSet \"kubernetesapisample-599868f7bc\" has successfully progressed."
          }
        ]
      }
    },
    {
      "metadata": {
        "name": "compose",
        "namespace": "docker",
        "selfLink": "/apis/apps/v1/namespaces/docker/deployments/compose",
        "uid": "319ae9db-37f1-4e82-99b8-95331609d8a5",
        "resourceVersion": "623",
        "generation": 1,
        "creationTimestamp": "2020-06-01T06:24:35Z",
        "labels": {
          "com.docker.default-service-type": "",
          "com.docker.deploy-namespace": "docker",
          "com.docker.fry": "compose",
          "com.docker.image-tag": "v0.4.25-alpha1"
        },
        "annotations": {
          "deployment.kubernetes.io/revision": "1"
        }
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "matchLabels": {
            "com.docker.default-service-type": "",
            "com.docker.deploy-namespace": "docker",
            "com.docker.fry": "compose",
            "com.docker.image-tag": "v0.4.25-alpha1"
          }
        },
        "template": {
          "metadata": {
            "creationTimestamp": null,
            "labels": {
              "com.docker.default-service-type": "",
              "com.docker.deploy-namespace": "docker",
              "com.docker.fry": "compose",
              "com.docker.image-tag": "v0.4.25-alpha1"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "compose",
                "image": "docker/kube-compose-controller:v0.4.25-alpha1",
                "args": [
                  "--kubeconfig",
                  "",
                  "--reconciliation-interval",
                  "12h0m0s",
                  "--healthz-check-port",
                  "0"
                ],
                "resources": {},
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "imagePullPolicy": "IfNotPresent"
              }
            ],
            "restartPolicy": "Always",
            "terminationGracePeriodSeconds": 30,
            "dnsPolicy": "ClusterFirst",
            "serviceAccountName": "compose",
            "serviceAccount": "compose",
            "securityContext": {},
            "affinity": {
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "beta.kubernetes.io/os",
                          "operator": "In",
                          "values": [
                            "linux"
                          ]
                        },
                        {
                          "key": "beta.kubernetes.io/arch",
                          "operator": "In",
                          "values": [
                            "amd64"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "schedulerName": "default-scheduler"
          }
        },
        "strategy": {
          "type": "RollingUpdate",
          "rollingUpdate": {
            "maxUnavailable": "25%",
            "maxSurge": "25%"
          }
        },
        "revisionHistoryLimit": 10,
        "progressDeadlineSeconds": 600
      },
      "status": {
        "observedGeneration": 1,
        "replicas": 1,
        "updatedReplicas": 1,
        "readyReplicas": 1,
        "availableReplicas": 1,
        "conditions": [
          {
            "type": "Available",
            "status": "True",
            "lastUpdateTime": "2020-06-01T06:25:02Z",
            "lastTransitionTime": "2020-06-01T06:25:02Z",
            "reason": "MinimumReplicasAvailable",
            "message": "Deployment has minimum availability."
          },
          {
            "type": "Progressing",
            "status": "True",
            "lastUpdateTime": "2020-06-01T06:25:02Z",
            "lastTransitionTime": "2020-06-01T06:24:35Z",
            "reason": "NewReplicaSetAvailable",
            "message": "ReplicaSet \"compose-78f95d4f8c\" has successfully progressed."
          }
        ]
      }
    },
    {
      "metadata": {
        "name": "compose-api",
        "namespace": "docker",
        "selfLink": "/apis/apps/v1/namespaces/docker/deployments/compose-api",
        "uid": "170ffc97-fe75-4db3-8bc8-f8f32973717e",
        "resourceVersion": "368328",
        "generation": 1,
        "creationTimestamp": "2020-06-01T06:24:35Z",
        "labels": {
          "com.docker.deploy-namespace": "docker",
          "com.docker.fry": "compose.api",
          "com.docker.image-tag": "v0.4.25-alpha1"
        },
        "annotations": {
          "deployment.kubernetes.io/revision": "1"
        }
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "matchLabels": {
            "com.docker.deploy-namespace": "docker",
            "com.docker.fry": "compose.api",
            "com.docker.image-tag": "v0.4.25-alpha1"
          }
        },
        "template": {
          "metadata": {
            "creationTimestamp": null,
            "labels": {
              "com.docker.deploy-namespace": "docker",
              "com.docker.fry": "compose.api",
              "com.docker.image-tag": "v0.4.25-alpha1"
            }
          },
          "spec": {
            "volumes": [
              {
                "name": "etcd-secret",
                "secret": {
                  "secretName": "compose-etcd",
                  "items": [
                    {
                      "key": "ca",
                      "path": "ca.crt"
                    },
                    {
                      "key": "cert",
                      "path": "client.crt"
                    },
                    {
                      "key": "key",
                      "path": "client.key"
                    }
                  ],
                  "defaultMode": 420
                }
              }
            ],
            "containers": [
              {
                "name": "compose",
                "image": "docker/kube-compose-api-server:v0.4.25-alpha1",
                "args": [
                  "--kubeconfig",
                  "",
                  "--authentication-kubeconfig=",
                  "--authorization-kubeconfig=",
                  "--service-name=compose-api",
                  "--service-namespace",
                  "docker",
                  "--healthz-check-port",
                  "0",
                  "--etcd-servers=https://127.0.0.1:2379",
                  "--etcd-cafile=/etc/docker-compose/etcd/ca.crt",
                  "--etcd-certfile=/etc/docker-compose/etcd/client.crt",
                  "--etcd-keyfile=/etc/docker-compose/etcd/client.key",
                  "--secure-port=9443"
                ],
                "resources": {},
                "volumeMounts": [
                  {
                    "name": "etcd-secret",
                    "readOnly": true,
                    "mountPath": "/etc/docker-compose/etcd"
                  }
                ],
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "imagePullPolicy": "IfNotPresent"
              }
            ],
            "restartPolicy": "Always",
            "terminationGracePeriodSeconds": 30,
            "dnsPolicy": "ClusterFirst",
            "serviceAccountName": "compose",
            "serviceAccount": "compose",
            "hostNetwork": true,
            "securityContext": {},
            "affinity": {
              "nodeAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                    {
                      "matchExpressions": [
                        {
                          "key": "beta.kubernetes.io/os",
                          "operator": "In",
                          "values": [
                            "linux"
                          ]
                        },
                        {
                          "key": "beta.kubernetes.io/arch",
                          "operator": "In",
                          "values": [
                            "amd64"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "schedulerName": "default-scheduler"
          }
        },
        "strategy": {
          "type": "RollingUpdate",
          "rollingUpdate": {
            "maxUnavailable": "25%",
            "maxSurge": "25%"
          }
        },
        "revisionHistoryLimit": 10,
        "progressDeadlineSeconds": 600
      },
      "status": {
        "observedGeneration": 1,
        "replicas": 1,
        "updatedReplicas": 1,
        "readyReplicas": 1,
        "availableReplicas": 1,
        "conditions": [
          {
            "type": "Progressing",
            "status": "True",
            "lastUpdateTime": "2020-06-01T06:24:56Z",
            "lastTransitionTime": "2020-06-01T06:24:35Z",
            "reason": "NewReplicaSetAvailable",
            "message": "ReplicaSet \"compose-api-6ffb89dc58\" has successfully progressed."
          },
          {
            "type": "Available",
            "status": "True",
            "lastUpdateTime": "2020-06-09T03:16:35Z",
            "lastTransitionTime": "2020-06-09T03:16:35Z",
            "reason": "MinimumReplicasAvailable",
            "message": "Deployment has minimum availability."
          }
        ]
      }
    },
    {
      "metadata": {
        "name": "coredns",
        "namespace": "kube-system",
        "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/coredns",
        "uid": "bb5d273f-b3c5-4a94-a7d0-47eb748c6330",
        "resourceVersion": "1334228",
        "generation": 1,
        "creationTimestamp": "2020-06-01T06:23:18Z",
        "labels": {
          "k8s-app": "kube-dns"
        },
        "annotations": {
          "deployment.kubernetes.io/revision": "1"
        }
      },
      "spec": {
        "replicas": 2,
        "selector": {
          "matchLabels": {
            "k8s-app": "kube-dns"
          }
        },
        "template": {
          "metadata": {
            "creationTimestamp": null,
            "labels": {
              "k8s-app": "kube-dns"
            }
          },
          "spec": {
            "volumes": [
              {
                "name": "config-volume",
                "configMap": {
                  "name": "coredns",
                  "items": [
                    {
                      "key": "Corefile",
                      "path": "Corefile"
                    }
                  ],
                  "defaultMode": 420
                }
              }
            ],
            "containers": [
              {
                "name": "coredns",
                "image": "k8s.gcr.io/coredns:1.6.2",
                "args": [
                  "-conf",
                  "/etc/coredns/Corefile"
                ],
                "ports": [
                  {
                    "name": "dns",
                    "containerPort": 53,
                    "protocol": "UDP"
                  },
                  {
                    "name": "dns-tcp",
                    "containerPort": 53,
                    "protocol": "TCP"
                  },
                  {
                    "name": "metrics",
                    "containerPort": 9153,
                    "protocol": "TCP"
                  }
                ],
                "resources": {
                  "limits": {
                    "memory": "170Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "70Mi"
                  }
                },
                "volumeMounts": [
                  {
                    "name": "config-volume",
                    "readOnly": true,
                    "mountPath": "/etc/coredns"
                  }
                ],
                "livenessProbe": {
                  "httpGet": {
                    "path": "/health",
                    "port": 8080,
                    "scheme": "HTTP"
                  },
                  "initialDelaySeconds": 60,
                  "timeoutSeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "failureThreshold": 5
                },
                "readinessProbe": {
                  "httpGet": {
                    "path": "/ready",
                    "port": 8181,
                    "scheme": "HTTP"
                  },
                  "timeoutSeconds": 1,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "failureThreshold": 3
                },
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "imagePullPolicy": "IfNotPresent",
                "securityContext": {
                  "capabilities": {
                    "add": [
                      "NET_BIND_SERVICE"
                    ],
                    "drop": [
                      "all"
                    ]
                  },
                  "readOnlyRootFilesystem": true,
                  "allowPrivilegeEscalation": false
                }
              }
            ],
            "restartPolicy": "Always",
            "terminationGracePeriodSeconds": 30,
            "dnsPolicy": "Default",
            "nodeSelector": {
              "beta.kubernetes.io/os": "linux"
            },
            "serviceAccountName": "coredns",
            "serviceAccount": "coredns",
            "securityContext": {},
            "schedulerName": "default-scheduler",
            "tolerations": [
              {
                "key": "CriticalAddonsOnly",
                "operator": "Exists"
              },
              {
                "key": "node-role.kubernetes.io/master",
                "effect": "NoSchedule"
              }
            ],
            "priorityClassName": "system-cluster-critical"
          }
        },
        "strategy": {
          "type": "RollingUpdate",
          "rollingUpdate": {
            "maxUnavailable": 1,
            "maxSurge": "25%"
          }
        },
        "revisionHistoryLimit": 10,
        "progressDeadlineSeconds": 600
      },
      "status": {
        "observedGeneration": 1,
        "replicas": 2,
        "updatedReplicas": 2,
        "readyReplicas": 2,
        "availableReplicas": 2,
        "conditions": [
          {
            "type": "Progressing",
            "status": "True",
            "lastUpdateTime": "2020-06-01T06:23:37Z",
            "lastTransitionTime": "2020-06-01T06:23:24Z",
            "reason": "NewReplicaSetAvailable",
            "message": "ReplicaSet \"coredns-5644d7b6d9\" has successfully progressed."
          },
          {
            "type": "Available",
            "status": "True",
            "lastUpdateTime": "2020-07-06T15:00:53Z",
            "lastTransitionTime": "2020-07-06T15:00:53Z",
            "reason": "MinimumReplicasAvailable",
            "message": "Deployment has minimum availability."
          }
        ]
      }
    }
  ]
}
